@import("Foundation");
@import("CoreMotion");
@import("NSOperationQueue");
@import("UIViewController");

var _motionManager,
    _activityManager,
    _stepCounter;

// Public APIs

var apiName = "Ti.CoreMotion";
exports.apiName = apiName;
exports.getApiName = function() {
    return apiName;
}

// ----------------------------------------------------
// Accelerometer
// ----------------------------------------------------

exports.setAccelerometerUpdateInterval = function(t) {
    ENSURE_NUMBER(t);
    // Converting from milliseconds to seconds
    sharedManager().accelerometerUpdateInterval = msToSeconds(t);
};

exports.startAccelerometerUpdates = function(cb) {
    // This is the block that will be called when an update happens.
    function completionHandler(accelerometerData, error) {
        var eventDict = accelerometerObjectWithTimestampInMS(accelerometerData);
        eventDict = addErrorToEvent(error, eventDict);
        cb(eventDict);
    }

    // If a callback is passed in then it will be called when updates happen.
    if (cb) {
        ENSURE_FUNCTION(cb);
        sharedManager().startAccelerometerUpdatesToQueue(NSOperationQueue.alloc().init(), completionHandler);
        return;
    }
    sharedManager().startAccelerometerUpdates();
};

exports.stopAccelerometerUpdates = function() {
    sharedManager().stopAccelerometerUpdates();
};

exports.isAccelerometerActive = function() {
    return sharedManager().isAccelerometerActive();
};

exports.isAccelerometerAvailable = function() {
    return sharedManager().isAccelerometerAvailable();
};

exports.getAccelerometerData = function() {
    return accelerometerObjectWithTimestampInMS(sharedManager().accelerometerData);
};

function accelerometerObjectWithTimestampInMS(accelerometerData) {
    return {
        timestamp: (accelerometerData) ? nsTimeIntervalToMS(accelerometerData.timestamp) : undefined,
        acceleration: (accelerometerData) ? accelerometerData.acceleration : undefined
    };
}

// ----------------------------------------------------
// Gyroscope
// ----------------------------------------------------

exports.setGyroUpdateInterval = function(t) {
    ENSURE_NUMBER(t);
    // Converting from milliseconds to seconds
    sharedManager().gyroUpdateInterval = msToSeconds(t);
};

exports.startGyroUpdates = function(cb) {
    // This is the block that will be called when an update happens.
    function completionHandler(gyroData, error) {
        var eventDict = gyroObjectWithTimestampInMS(gyroData);
        eventDict = addErrorToEvent(error, eventDict);
        cb(eventDict);
    }

    // If a callback is passed in then it will be called when updates happen.
    if (cb) {
        ENSURE_FUNCTION(cb);
        sharedManager().startGyroUpdatesToQueue(NSOperationQueue.alloc().init(), completionHandler);
        return;
    }
    sharedManager().startGyroUpdates();
};

exports.stopGyroUpdates = function() {
    sharedManager().stopGyroUpdates();
};

exports.isGyroActive = function() {
    return sharedManager().isGyroActive();
};

exports.isGyroAvailable = function() {
    return sharedManager().isGyroAvailable();
};

exports.getGyroData = function() {
    return gyroObjectWithTimestampInMS(sharedManager().gyroData);
};

function gyroObjectWithTimestampInMS(gyroData) {
    return {
        timestamp: (gyroData) ? nsTimeIntervalToMS(gyroData.timestamp) : undefined,
        rotationRate: (gyroData) ? gyroData.rotationRate : undefined
    };
}

// ----------------------------------------------------
// Magnetometer
// ----------------------------------------------------

exports.setMagnetometerUpdateInterval = function(t) {
    ENSURE_NUMBER(t);
    // Converting from milliseconds to seconds
    sharedManager().magnetometerUpdateInterval = msToSeconds(t);
};

exports.startMagnetometerUpdates = function(cb) {
    // This is the block that will be called when an update happens.
    function completionHandler(magnetometerData, error) {
        var eventDict = magnetometerObjectWithTimestampInMS(magnetometerData);
        eventDict = addErrorToEvent(error, eventDict);
        cb(eventDict);
    }

    // If a callback is passed in then it will be called when updates happen.
    if (cb) {
        ENSURE_FUNCTION(cb);
        sharedManager().startMagnetometerUpdatesToQueue(NSOperationQueue.alloc().init(), completionHandler);
        return;
    }
    sharedManager().startMagnetometerUpdates();
};

exports.stopMagnetometerUpdates = function() {
    sharedManager().stopMagnetometerUpdates();
};

exports.isMagnetometerActive = function() {
    return sharedManager().isMagnetometerActive();
};

exports.isMagnetometerAvailable = function() {
    return sharedManager().isMagnetometerAvailable();
};

exports.getMagnetometerData = function() {
    return magnetometerObjectWithTimestampInMS(sharedManager().magnetometerData);
};

function magnetometerObjectWithTimestampInMS(magnetometerData) {
    return {
        timestamp: (magnetometerData) ? nsTimeIntervalToMS(magnetometerData.timestamp) : undefined,
        magneticField: (magnetometerData) ? magnetometerData.magneticField : undefined
    };
}

// ----------------------------------------------------
// Device Motion
// ----------------------------------------------------

exports.setShowsDeviceMovementDisplay = function(b) {
    ENSURE_BOOL(b);
    sharedManager().showsDeviceMovementDisplay = b;
};

exports.setDeviceMotionUpdateInterval = function(t) {
    ENSURE_NUMBER(t);
    // Converting from milliseconds to seconds
    sharedManager().deviceMotionUpdateInterval = msToSeconds(t);
};

exports.startDeviceMotionUpdatesUsingReferenceFrame = function(args, cb) {
    // This is the block that will be called when an update happens.
    function completionHandler(motion, error) {
        var eventDict = motionObjectWithTimestampInMS(motion);
        eventDict = addErrorToEvent(error, eventDict);
        cb(eventDict);
    }

    ENSURE_OBJECT(args);
    ENSURE_NUMBER(args.referenceFrame);
    var ref = args.referenceFrame;

    // If a callback is passed in then it will be called when updates happen.
    if (cb) {
        ENSURE_FUNCTION(cb);
        sharedManager().startDeviceMotionUpdatesUsingReferenceFrame(ref, NSOperationQueue.alloc().init(), completionHandler);
        return;
    }
    sharedManager().startDeviceMotionUpdatesUsingReferenceFrame(ref);
};

exports.startDeviceMotionUpdates = function(cb) {
    // This is the block that will be called when an update happens.
    function completionHandler(motion, error) {
        var eventDict = motionObjectWithTimestampInMS(motion);
        eventDict = addErrorToEvent(error, eventDict);
        cb(eventDict);
    }

    // If a callback is passed in then it will be called when updates happen.
    if (cb) {
        ENSURE_FUNCTION(cb);
        sharedManager().startDeviceMotionUpdatesToQueue(NSOperationQueue.alloc().init(), completionHandler);
        return;
    }
    sharedManager().startDeviceMotionUpdates();
};

exports.stopDeviceMotionUpdates = function() {
    sharedManager().stopDeviceMotionUpdates();
};

exports.getAttitudeReferenceFrame = function() {
    return sharedManager().attitudeReferenceFrame;
};

exports.availableAttitudeReferenceFrames = function() {
    return CMMotionManager.availableAttitudeReferenceFrames();
};

exports.isDeviceMotionActive = function() {
    return sharedManager().isDeviceMotionActive();
};

exports.isDeviceMotionAvailable = function() {
    return sharedManager().isDeviceMotionAvailable();
};

exports.getDeviceMotion = function() {
    return motionObjectWithTimestampInMS(sharedManager().deviceMotion);
};

function motionObjectWithTimestampInMS(motion) {
    return {
        timestamp:        (motion) ? nsTimeIntervalToMS(motion.timestamp) : undefined,
        attitude:         (motion) ? motion.attitude : undefined,
        rotationRate:     (motion) ? motion.rotationRate : undefined,
        gravity:          (motion) ? motion.gravity : undefined,
        userAcceleration: (motion) ? motion.userAcceleration : undefined,
        magneticField:    (motion) ? motion.magneticField : undefined
    };
}

// ----------------------------------------------------
// Motion Activity
// ----------------------------------------------------

exports.isActivityAvailable = function() {
    // iOS 7+
    if (!isIOS7OrGreater()) {
        logAddedIniOS7Warning("isActivityAvailable");
        return false;
    }
    return CMMotionActivityManager.isActivityAvailable();
};

exports.startActivityUpdates = function(cb) {
    if (!isIOS7OrGreater()) {
        logAddedIniOS7Warning("startActivityUpdates");
        return;
    }
    // This is the block that will be called when an update happens.
    function completionHandler(activity) {
        var eventDict = {
            activity: jsActivityFromMotionActivity(activity)
        };
        cb(eventDict);
    }

    ENSURE_FUNCTION(cb);
    sharedActivityManager().startActivityUpdatesToQueue(NSOperationQueue.alloc().init(), completionHandler);
};

exports.stopActivityUpdates = function() {
    if (!isIOS7OrGreater()) {
        logAddedIniOS7Warning("stopActivityUpdates");
        return;
    }
    sharedActivityManager().stopActivityUpdates();
};

exports.queryActivity = function(args, cb) {
    if (!isIOS7OrGreater()) {
        logAddedIniOS7Warning("queryActivity");
        return;
    }
    // This is the block that will be called when an update happens.
    function completionHandler(activities, error) {
        var eventDict = {
            activities: (activities) ? jsArrayFromNSArray(activities, jsActivityFromMotionActivity) : undefined
        };
        eventDict = addErrorToEvent(error, eventDict);
        cb(eventDict);
    }

    ENSURE_OBJECT(args);
    ENSURE_DATE(args.start);
    ENSURE_DATE(args.end);
    ENSURE_FUNCTION(cb);

    var start = nsDateFromJSDate(args.start),
        end = nsDateFromJSDate(args.end);

    sharedActivityManager().queryActivityStartingFromDate(start, end, NSOperationQueue.alloc().init(), completionHandler);
};

// MotionActivities can't be passed straight back to js because
// the startDate needs to be a js Date object instead of an NSDate
function jsActivityFromMotionActivity(activity) {
    if (!activity) {return undefined};
    return {
        stationary: activity.stationary,
        walking: activity.walking,
        running: activity.running,
        automotive: activity.automotive,
        unknown: activity.unknown,
        startDate: activity.startDate ? jsDateFromNSDate(activity.startDate) : undefined,
        confidence: activity.confidence
    };
}

// ----------------------------------------------------
// Step Counter
// ----------------------------------------------------

exports.isStepCountingAvailable = function() {
    // iOS 7+
    if (!isIOS7OrGreater()) {
        logAddedIniOS7Warning("isStepCountingAvailable");
        return false;
    }
    return CMStepCounter.isStepCountingAvailable();
};

exports.startStepCountingUpdates = function(args, cb) {
    if (!isIOS7OrGreater()) {
        logAddedIniOS7Warning("startStepCountingUpdates");
        return;
    }
    // This is the block that will be called when an update happens.
    function completionHandler(numberOfSteps, timestamp, error) {
        var eventDict = {
            timestamp: (timestamp) ? jsDateFromNSDate(timestamp) : undefined,
            numberOfSteps: numberOfSteps
        };
        eventDict = addErrorToEvent(error, eventDict);
        cb(eventDict);
    }

    ENSURE_OBJECT(args);
    ENSURE_NUMBER(args.stepCounts);
    ENSURE_FUNCTION(cb);
    sharedStepCounter().startStepCountingUpdatesToQueue(NSOperationQueue.alloc().init(), args.stepCounts, completionHandler);
};

exports.stopStepCountingUpdates = function() {
    if (!isIOS7OrGreater()) {
        logAddedIniOS7Warning("stopStepCountingUpdates");
        return;
    }
    sharedStepCounter().stopStepCountingUpdates();
};

exports.queryStepCount = function(args, cb) {
    if (!isIOS7OrGreater()) {
        logAddedIniOS7Warning("queryStepCount");
        return;
    }
    // This is the block that will be called when an update happens.
    function completionHandler(numberOfSteps, error) {
        var eventDict = {
            numberOfSteps: numberOfSteps
        };
        eventDict = addErrorToEvent(error, eventDict);
        cb(eventDict);
    }

    ENSURE_OBJECT(args);
    ENSURE_DATE(args.start);
    ENSURE_DATE(args.end);
    ENSURE_FUNCTION(cb);

    var start = nsDateFromJSDate(args.start),
        end = nsDateFromJSDate(args.end);

    sharedStepCounter().queryStepCountStartingFrom(start, end, NSOperationQueue.alloc().init(), completionHandler);
};

// Exposing the shared managers to allow access to 
// their properties and methods via hyperloop
exports.sharedManager = sharedManager;
exports.sharedActivityManager = sharedActivityManager;
exports.sharedStepCounter = sharedStepCounter;

// ----------------------------------------------------
// Constants
// ----------------------------------------------------

// Errors
exports.ERROR_NULL = CMErrorNULL;
exports.ERROR_DEVICE_REQUIRES_MOVEMENT = CMErrorDeviceRequiresMovement;
exports.ERROR_TRUE_NORTH_NOT_AVAILABLE = CMErrorTrueNorthNotAvailable;
exports.ERROR_UNKNOWN = CMErrorUnknown;
exports.ERROR_MOTION_ACTIVITY_NOT_AVAILABLE = CMErrorMotionActivityNotAvailable;
exports.ERROR_MOTION_ACTIVITY_NOT_AUTHORIZED = CMErrorMotionActivityNotAuthorized;
exports.ERROR_MOTION_ACTIVITY_NOT_ENTITLED = CMErrorMotionActivityNotEntitled;
exports.ERROR_INVALID_PARAMETER = CMErrorInvalidParameter;

// Attitude Reference Frames
exports.ATTITUDE_REFERENCE_FRAME_X_ARBITRARY_Z_VERTICAL = CMAttitudeReferenceFrameXArbitraryZVertical;
exports.ATTITUDE_REFERENCE_FRAME_X_ARBITRARY_CORRECTED_Z_VERTICAL = CMAttitudeReferenceFrameXArbitraryCorrectedZVertical;
exports.ATTITUDE_REFERENCE_FRAME_X_MAGNETIC_NORTH_Z_VERTICAL = CMAttitudeReferenceFrameXMagneticNorthZVertical;
exports.ATTITUDE_REFERENCE_FRAME_X_TRUE_NORTH_Z_VERTICAL = CMAttitudeReferenceFrameXTrueNorthZVertical;

// Magnetic Field Calibration Accuracy
exports.MAGNETIC_FIELD_CALIBRATION_ACCURACY_UNCALIBRATED = CMMagneticFieldCalibrationAccuracyUncalibrated;
exports.MAGNETIC_FIELD_CALIBRATION_ACCURACY_LOW = CMMagneticFieldCalibrationAccuracyLow;
exports.MAGNETIC_FIELD_CALIBRATION_ACCURACY_MEDIUM = CMMagneticFieldCalibrationAccuracyMedium;
exports.MAGNETIC_FIELD_CALIBRATION_ACCURACY_HIGH = CMMagneticFieldCalibrationAccuracyHigh;

// Motion Activity Confidence
exports.MOTION_ACTIVITY_CONFIDENCE_LOW = CMMotionActivityConfidenceLow;
exports.MOTION_ACTIVITY_CONFIDENCE_MEDIUM = CMMotionActivityConfidenceMedium;
exports.MOTION_ACTIVITY_CONFIDENCE_HIGH = CMMotionActivityConfidenceHigh;


// ----------------------------------------------------
// Utils
// ----------------------------------------------------

function sharedManager() {
    if (!_motionManager) {
        _motionManager = CMMotionManager.alloc().init();
    }
    return _motionManager;
}

function sharedActivityManager() {
    if (!_activityManager) {
        _activityManager = CMMotionActivityManager.alloc().init();
    }
    return _activityManager;
}

function sharedStepCounter() {
    if (!_stepCounter) {
        _stepCounter = CMStepCounter.alloc().init();
    }
    return _stepCounter;
}

function addErrorToEvent(error, eventDict) {
    if (!error || error.code() !== kJSPropertyAttributeNone) {
        eventDict.success = false;
        eventDict.error = error.localizedDescription();
        eventDict.code = error.code()
    } else {
        eventDict.success = true;
    }
    return eventDict;
}

function isFunction(functionToCheck) {
    return functionToCheck && Object.prototype.toString.call(functionToCheck) === '[object Function]';
}

function isDate(dateToCheck) {
    return dateToCheck && Object.prototype.toString.call(dateToCheck) === '[object Date]';
}

function isIOS7OrGreater() {
    return UIViewController.instancesRespondToSelector(NSSelectorFromString("childViewControllerForStatusBarStyle"));
}

function logAddedIniOS7Warning(name) {
    NSLog("[WARN] `" + name + "` is only supported on iOS 7 and greater.");
}

/*
 * Convert an NSArray to a javascript array.
 * @param {NSArray} NSArray to be converted
 * @param {function} (optional) a function that will take an object and return a replacement object
 * can be used to convert objects in the array
 * @return {Array} js array
 */
function jsArrayFromNSArray(nsArr, cb) {
    if (!nsArr) {return undefined};
    var arr = [];
    for (var i = 0, j = nsArr.count(); i < j; i++) {
        var obj = nsArr.objectAtIndex(i);
        obj = cb ? cb(obj) : obj;
        arr.push(obj);
    }
    return arr;
}

function jsDateFromNSDate(nsDate) {
    if (!nsDate) {return undefined};
    return new Date(nsDate.timeIntervalSince1970()*1000);
}

function nsDateFromJSDate(jsDate) {
    if (!jsDate) {return undefined};
    return NSDate.dateWithTimeIntervalSince1970(jsDate.getTime()/1000);
}

function nsTimeIntervalToMS(nsTimeInterval) {
    return nsTimeInterval*1000;
}

function msToSeconds(ms) {
    return ms/1000;
}

// Validation

function ENSURE_FUNCTION(arg) {
    var type = typeof arg;
    if (!isFunction(arg)) {
        throw new Error("expected a 'function' but received a `" + type + "`");
    }
}

function ENSURE_DATE(arg) {
    var type = typeof arg;
    if (!isDate(arg)) {
        throw new Error("expected a 'Date' but received a `" + type + "`");
    }
}

function ENSURE_NUMBER(arg) {
    ENSURE_TYPE(arg, 'number');
}

function ENSURE_BOOL(arg) {
    ENSURE_TYPE(arg, 'boolean');
}

function ENSURE_OBJECT(arg) {
    ENSURE_TYPE(arg, 'object');
}

function ENSURE_TYPE(arg, t) {
    var type = typeof arg;
    if (type !== t) {
        throw new Error("expected a '" + t + "' but received a `" + type + "`");
    }
}
